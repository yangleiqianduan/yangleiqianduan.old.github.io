const assert = require('./assert')
const getType = require('./getType')
const object2Query = require('./object2Query')
const appendSearch = require('./appendSearch')
const object2Search = require('./object2Search')

const responseTypes = [ 'json', 'text' ]

module.exports = function jsonp (config) {

  let {
    uri = '/',
    data = {},
    query = {},
    uriReplacer = {},
    responseType = 'json',
    callbackHandler = 'jsonp',
    requestHandler = f => f
  } = config || {}

  const callbackHandlerValue = 'jsonp_' + Date.now() + '_' +
    Math.random().toFixed(5).substring(2)

  responseType = responseTypes.indexOf(responseType) >= 0 ? responseType : 'text'

  query = Object.assign({}, query, data)

  const request = {
    callbackHandlerValue,
    callbackHandler,
    uri: appendSearch(
      uri.replace( /\{\s*([^\}]+)?\s*\}/g, (_, mark) => uriReplacer[mark] ),
      object2Search(query)
    )
  }

  return Promise.resolve(requestHandler(request)).then(request => {
    return new Promise((resolve, reject) => {
      const head = document.head || document.getElementsByTagName('head')[0]
      const script = document.createElement('script')
      window[request.callbackHandlerValue] = value => {
        script.parentNode.removeChild(script)
        delete window[request.callbackHandlerValue]
        resolve(
          getType(value) === 'string' && responseType === 'json' ?
            JSON.parse(value) : value
        )
      }
      head.appendChild(script).src = appendSearch(request.uri, object2Search({
         [request.callbackHandler]: request.callbackHandlerValue
      }))
    })
  })
}
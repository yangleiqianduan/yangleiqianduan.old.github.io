const assert = require('./assert')
const object2Query = require('./object2Query')
const appendSearch = require('./appendSearch')
const object2Search = require('./object2Search')

const responseTypes = [ 'arrayBuffer', 'blob', 'formData', 'json', 'text' ]

module.exports = function ajax (config) {
	let {
		uri = '/',
		method = 'GET',
		headers = {},
		credentials = 'include',
		contentType = 'x-www-form-urlencoded',
		data = {},
		query = {},
		mode = 'same-origin',
		redirect = 'follow',
		responseType = 'json',
    requestHandler = f => f
	} = config || {}

	let body = null

	headers = Object.assign({
		'X-Requested-With': 'XMLHttpRequest',
		'Content-Type': contentType
	}, headers)

	method = method.toUpperCase()

	responseType = responseTypes.indexOf(responseType) >= 0 ? responseType : 'text'

	if (~['GET', 'HEAD', 'OPTIONS'].indexOf(method)) {
    query = Object.assign({}, query, data)
  } else {
    // 处理 body 数据
    switch (contentType) {
      case 'multipart/form-data':
      	assert.warn(!(data instanceof FormData),
      		'param\'s data need a formData')
        body = data
        break
      case 'application/json':
        body = JSON.stringify(data)
        break
      case 'application/x-www-form-urlencoded':
        body = object2Query(data)
        break
      default:
        body = data
    }
  }

  const request = {
    method, headers, credentials, mode, redirect,
    uri: appendSearch(
      uri.replace( /\{\s*([^\}]+)?\s*\}/g, (_, mark) => uriReplacer[mark] ),
      object2Search(query)
    )
  }

  return Promise.resolve(requestHandler(request)).then(request => {
    return fetch(request.uri, request)
      .then(response => response.ok ? response : Promise.reject(response.status))
      .then(response => response[responseType]() )
  })
}

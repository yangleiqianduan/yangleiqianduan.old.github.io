/**
 * getType 获取对象类型
 * @param  {any}    object
 * @return {string} boolean|number|string|function|array|date|regexp|object|error
 */

import assert from './assert'
import string2Array from './string2Array'

const types = string2Array(`
  Boolean, Number, String, Function,
  Array, Date, RegExp, Object, Error
`)

const class2type = {}
const _toString = class2type.toString
for (let item of types) class2type[`[object ${item}]`] = item.toLowerCase()

function getType (object) {
  if (object === null) return object + ''
  let type = typeof object
  return type === 'object' || type === 'function' ?
    class2type[_toString.call(object)] || 'object' : type
}

/**
 * getTypeChecker 返回类型检查器
 * @param  {string|undefined} type 类型
 * @return {boolean}
 */
function getTypeChekcer (type) {

  // 判断入参， 必须是 字符串 或者 undefined
  assert(
    getType(type) !== 'string' && type !== undefined,
    'param must be string or undefined'
  )

  const checker = any => {
    if (type === undefined) return true
    if (any === null || any === undefined) return true
    return checker.required(any)
  }
  checker.required = any => getType(any) === type

  return checker
}

module.exports = Object.assign(getType, {checker: getTypeChekcer})
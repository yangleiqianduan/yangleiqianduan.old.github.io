"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function () {
  function Subscribe() {
    _classCallCheck(this, Subscribe);

    this._events = {};
  }

  _createClass(Subscribe, [{
    key: "on",
    value: function on(type, callback, context) {
      var _this = this;

      [].concat(type).forEach(function (type) {
        var events = _this._events[type] = _this._events[type] || [];
        events.push([callback, context]);
      });
      return this.off(type, callback);
    }
  }, {
    key: "off",
    value: function off(type, callback) {
      var _this2 = this;

      if (type === undefined) {
        this._events = {};
        return;
      }

      [].concat(type).forEach(function (type) {
        if (!_this2._events[type]) return;
        if (callback === undefined) {
          _this2._events[type].length = 0;
          return;
        }
        _this2._events[type] = _this2._events[type].filter(function (one) {
          return one[0] != callback;
        });
      });
    }
  }, {
    key: "emit",
    value: function emit(type) {
      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (this._events[type] || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var one = _step.value;

          one[1] ? one[0].apply(one[1], data) : one[0].apply(one, data);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return Subscribe;
}();
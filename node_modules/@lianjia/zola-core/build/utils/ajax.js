'use strict';

var assert = require('./assert');
var object2Query = require('./object2Query');
var appendSearch = require('./appendSearch');
var object2Search = require('./object2Search');

var responseTypes = ['arrayBuffer', 'blob', 'formData', 'json', 'text'];

module.exports = function ajax(config) {
  var _ref = config || {},
      _ref$uri = _ref.uri,
      uri = _ref$uri === undefined ? '/' : _ref$uri,
      _ref$method = _ref.method,
      method = _ref$method === undefined ? 'GET' : _ref$method,
      _ref$headers = _ref.headers,
      headers = _ref$headers === undefined ? {} : _ref$headers,
      _ref$credentials = _ref.credentials,
      credentials = _ref$credentials === undefined ? 'include' : _ref$credentials,
      _ref$contentType = _ref.contentType,
      contentType = _ref$contentType === undefined ? 'x-www-form-urlencoded' : _ref$contentType,
      _ref$data = _ref.data,
      data = _ref$data === undefined ? {} : _ref$data,
      _ref$query = _ref.query,
      query = _ref$query === undefined ? {} : _ref$query,
      _ref$mode = _ref.mode,
      mode = _ref$mode === undefined ? 'same-origin' : _ref$mode,
      _ref$redirect = _ref.redirect,
      redirect = _ref$redirect === undefined ? 'follow' : _ref$redirect,
      _ref$responseType = _ref.responseType,
      responseType = _ref$responseType === undefined ? 'json' : _ref$responseType,
      _ref$requestHandler = _ref.requestHandler,
      requestHandler = _ref$requestHandler === undefined ? function (f) {
    return f;
  } : _ref$requestHandler;

  var body = null;

  headers = Object.assign({
    'X-Requested-With': 'XMLHttpRequest',
    'Content-Type': contentType
  }, headers);

  method = method.toUpperCase();

  responseType = responseTypes.indexOf(responseType) >= 0 ? responseType : 'text';

  if (~['GET', 'HEAD', 'OPTIONS'].indexOf(method)) {
    query = Object.assign({}, query, data);
  } else {
    // 处理 body 数据
    switch (contentType) {
      case 'multipart/form-data':
        assert.warn(!(data instanceof FormData), 'param\'s data need a formData');
        body = data;
        break;
      case 'application/json':
        body = JSON.stringify(data);
        break;
      case 'application/x-www-form-urlencoded':
        body = object2Query(data);
        break;
      default:
        body = data;
    }
  }

  var request = {
    method: method, headers: headers, credentials: credentials, mode: mode, redirect: redirect,
    uri: appendSearch(uri.replace(/\{\s*([^\}]+)?\s*\}/g, function (_, mark) {
      return uriReplacer[mark];
    }), object2Search(query))
  };

  return Promise.resolve(requestHandler(request)).then(function (request) {
    return fetch(request.uri, request).then(function (response) {
      return response.ok ? response : Promise.reject(response.status);
    }).then(function (response) {
      return response[responseType]();
    });
  });
};
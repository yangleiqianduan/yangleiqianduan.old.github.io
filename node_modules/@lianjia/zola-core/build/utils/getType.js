'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * getType 获取对象类型
                                                                                                                                                                                                                                                                               * @param  {any}    object
                                                                                                                                                                                                                                                                               * @return {string} boolean|number|string|function|array|date|regexp|object|error
                                                                                                                                                                                                                                                                               */

var _assert = require('./assert');

var _assert2 = _interopRequireDefault(_assert);

var _string2Array = require('./string2Array');

var _string2Array2 = _interopRequireDefault(_string2Array);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var types = (0, _string2Array2.default)('\n  Boolean, Number, String, Function,\n  Array, Date, RegExp, Object, Error\n');

var class2type = {};
var _toString = class2type.toString;
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = types[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var item = _step.value;
    class2type['[object ' + item + ']'] = item.toLowerCase();
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

function getType(object) {
  if (object === null) return object + '';
  var type = typeof object === 'undefined' ? 'undefined' : _typeof(object);
  return type === 'object' || type === 'function' ? class2type[_toString.call(object)] || 'object' : type;
}

/**
 * getTypeChecker 返回类型检查器
 * @param  {string|undefined} type 类型
 * @return {boolean}
 */
function getTypeChekcer(type) {

  // 判断入参， 必须是 字符串 或者 undefined
  (0, _assert2.default)(getType(type) !== 'string' && type !== undefined, 'param must be string or undefined');

  var checker = function checker(any) {
    if (type === undefined) return true;
    if (any === null || any === undefined) return true;
    return checker.required(any);
  };
  checker.required = function (any) {
    return getType(any) === type;
  };

  return checker;
}

module.exports = Object.assign(getType, { checker: getTypeChekcer });
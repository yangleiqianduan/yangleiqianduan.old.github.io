'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var assert = require('./assert');
var getType = require('./getType');
var object2Query = require('./object2Query');
var appendSearch = require('./appendSearch');
var object2Search = require('./object2Search');

var responseTypes = ['json', 'text'];

module.exports = function jsonp(config) {
  var _ref = config || {},
      _ref$uri = _ref.uri,
      uri = _ref$uri === undefined ? '/' : _ref$uri,
      _ref$data = _ref.data,
      data = _ref$data === undefined ? {} : _ref$data,
      _ref$query = _ref.query,
      query = _ref$query === undefined ? {} : _ref$query,
      _ref$uriReplacer = _ref.uriReplacer,
      uriReplacer = _ref$uriReplacer === undefined ? {} : _ref$uriReplacer,
      _ref$responseType = _ref.responseType,
      responseType = _ref$responseType === undefined ? 'json' : _ref$responseType,
      _ref$callbackHandler = _ref.callbackHandler,
      callbackHandler = _ref$callbackHandler === undefined ? 'jsonp' : _ref$callbackHandler,
      _ref$requestHandler = _ref.requestHandler,
      requestHandler = _ref$requestHandler === undefined ? function (f) {
    return f;
  } : _ref$requestHandler;

  var callbackHandlerValue = 'jsonp_' + Date.now() + '_' + Math.random().toFixed(5).substring(2);

  responseType = responseTypes.indexOf(responseType) >= 0 ? responseType : 'text';

  query = Object.assign({}, query, data);

  var request = {
    callbackHandlerValue: callbackHandlerValue,
    callbackHandler: callbackHandler,
    uri: appendSearch(uri.replace(/\{\s*([^\}]+)?\s*\}/g, function (_, mark) {
      return uriReplacer[mark];
    }), object2Search(query))
  };

  return Promise.resolve(requestHandler(request)).then(function (request) {
    return new Promise(function (resolve, reject) {
      var head = document.head || document.getElementsByTagName('head')[0];
      var script = document.createElement('script');
      window[request.callbackHandlerValue] = function (value) {
        script.parentNode.removeChild(script);
        delete window[request.callbackHandlerValue];
        resolve(getType(value) === 'string' && responseType === 'json' ? JSON.parse(value) : value);
      };
      head.appendChild(script).src = appendSearch(request.uri, object2Search(_defineProperty({}, request.callbackHandler, request.callbackHandlerValue)));
    });
  });
};
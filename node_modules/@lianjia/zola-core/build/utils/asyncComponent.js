'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NullComponent = null;
module.exports = function asyncComponent(asyncModule) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

  return function (_React$Component) {
    _inherits(AsyncComponent, _React$Component);

    function AsyncComponent(props) {
      _classCallCheck(this, AsyncComponent);

      var _this = _possibleConstructorReturn(this, (AsyncComponent.__proto__ || Object.getPrototypeOf(AsyncComponent)).call(this, props));

      _this.state = { Component: NullComponent };
      return _this;
    }

    _createClass(AsyncComponent, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _this2 = this;

        if (this.state.Component !== NullComponent) return;
        asyncModule.then(function (module) {
          return _this2.setState({ Component: module[name] });
        });
      }
    }, {
      key: 'render',
      value: function render() {
        if (this.state.Component === NullComponent) return null;
        return _react2.default.createElement(this.state.Component, this.props);
      }
    }]);

    return AsyncComponent;
  }(_react2.default.Component);
};
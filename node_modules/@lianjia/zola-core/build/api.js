'use strict';

var config = require('./config');
var deepMerge = require('./utils/deepMerge');
var getType = require('./utils/getType');
var objectForEach = require('./utils/objectForEach');
var ajaxRequest = require('./utils/ajax');
var jsonpRequest = require('./utils/jsonp');
var assert = require('./utils/assert');

module.exports = function (defaultConfigCreater) {

  var configCreaters = {};
  var self = {};
  function setConfigCreater(type, configCreater) {
    configCreaters[type] = configCreater;
    var configs = getConfig(configCreaters);

    var keyMaps = {};
    objectForEach(configs, function (map) {
      return objectForEach(map, function (_, name) {
        return keyMaps[name] = name;
      });
    });
    keyMaps = objectForEach(keyMaps, function (_, name) {
      return objectForEach(configs, function (map) {
        return map[name] || {};
      });
    });

    var apis = objectForEach(keyMaps, function (config) {
      return makeRequest(config);
    });
    return Object.assign(self, apis, { set: setConfigCreater });
  }

  return setConfigCreater('default', defaultConfigCreater);
};

function makeRequest(apiConfigs) {
  return function (data) {
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


    var env = config.get('env');
    var apiConfig = apiConfigs[env] || {};

    var _apiConfig$base = apiConfig.base,
        base = _apiConfig$base === undefined ? '/' : _apiConfig$base,
        _apiConfig$uri = apiConfig.uri,
        uri = _apiConfig$uri === undefined ? '' : _apiConfig$uri,
        _apiConfig$method = apiConfig.method,
        method = _apiConfig$method === undefined ? 'GET' : _apiConfig$method,
        _apiConfig$headers = apiConfig.headers,
        headers = _apiConfig$headers === undefined ? {} : _apiConfig$headers,
        _apiConfig$credential = apiConfig.credentials,
        credentials = _apiConfig$credential === undefined ? 'include' : _apiConfig$credential,
        _apiConfig$contentTyp = apiConfig.contentType,
        contentType = _apiConfig$contentTyp === undefined ? 'x-www-form-urlencoded' : _apiConfig$contentTyp,
        _apiConfig$mode = apiConfig.mode,
        mode = _apiConfig$mode === undefined ? 'same-origin' : _apiConfig$mode,
        _apiConfig$redirect = apiConfig.redirect,
        redirect = _apiConfig$redirect === undefined ? 'follow' : _apiConfig$redirect,
        _apiConfig$responseTy = apiConfig.responseType,
        responseType = _apiConfig$responseTy === undefined ? 'json' : _apiConfig$responseTy,
        _apiConfig$jsonp = apiConfig.jsonp,
        jsonp = _apiConfig$jsonp === undefined ? false : _apiConfig$jsonp,
        _apiConfig$requestHan = apiConfig.requestHandler,
        requestHandler = _apiConfig$requestHan === undefined ? defaultRequestHandler : _apiConfig$requestHan,
        _apiConfig$responseHa = apiConfig.responseHandler,
        responseHandler = _apiConfig$responseHa === undefined ? defaultReponseHandler : _apiConfig$responseHa;


    if (base[base.length - 1] !== '/') base += '/';
    if (uri[0] === '/') uri = uri.substring(1);
    uri = base + uri;

    if (jsonp !== false) {
      var callbackHandler = getType(jsonp) === 'string' ? jsonp : 'jsonp';
      return jsonpRequest({
        uri: uri, responseType: responseType, callbackHandler: callbackHandler,
        data: data,
        query: option.query,
        uriReplacer: option.uriReplacer
      }).then(responseHandler.bind(apiConfig));
    } else {
      return ajaxRequest({
        uri: uri, method: method, credentials: credentials, contentType: contentType,
        mode: mode, redirect: redirect, responseType: responseType,
        data: data,
        query: option.query,
        uriReplacer: option.uriReplacer,
        headers: Object.assign({}, headers, option.headers)
      }).then(responseHandler.bind(apiConfig));
    }
  };
}

function getConfig(configCreaters) {

  if (configCreaters.default === undefined) {
    configCreaters = { default: configCreaters };
  }

  // 默认环境配置

  var _createConfig = createConfig(configCreaters.default),
      defaultConfigMap = _createConfig.configMap,
      defaultBaseConfig = _createConfig.baseConfig;

  return objectForEach(configCreaters, function (configCreater, env) {
    // 特殊环境配置
    var _ref = env === 'default' || createConfig(configCreater),
        envConfigMap = _ref.configMap,
        envBaseConfig = _ref.baseConfig;

    var baseConfig = deepMerge({}, defaultBaseConfig, envBaseConfig);
    var configMap = deepMerge({}, defaultConfigMap, envConfigMap);

    var configs = objectForEach(configMap, function (config) {
      return deepMerge({}, baseConfig, config);
    });
    return configs;
  });
}

function createConfig(fn) {
  if (getType(fn) !== 'function') return { configMap: null, baseConfig: null

    // 类型检查器
  };var typeCheckers = {
    string: getType.checker('string'),
    number: getType.checker('number'),
    boolean: getType.checker('boolean'),
    array: getType.checker('array'),
    object: getType.checker('object'),
    any: getType.checker()

    // 处理 api config 解析
  };var configMap = {};
  var api = function api(name, apiConfig) {
    // 重复检查
    assert(name in configMap, 'API named with "%s" is existed.', name);
    configMap[name] = apiConfig;
  };

  fn(Object.assign(api, {
    type: typeCheckers, // 类型检查器
    config: {} // 存放默认值
  }));
  return { configMap: configMap, baseConfig: api.config };
}

function defaultRequestHandler(request) {
  return request;
}
function defaultReponseHandler(body) {
  var codeKey = this.codeKey,
      dataKey = this.dataKey,
      messageKey = this.messageKey,
      successCode = this.successCode;
  var code = body[codeKey],
      data = body[dataKey],
      message = body[messageKey];
  // 检查 code

  var error = assert.assertError(code !== successCode, 'api response code error(%s)', code);

  if (error) throw Object.assign(error, {
    code: code, data: data, message: message || error.message
  });
  return data;
}